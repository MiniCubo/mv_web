<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
    <title>Scheduler</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    
    <!-- Correct CDN links -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        /* Mobile-first responsive design */
        body {
            font-size: 16px; /* Prevents zoom on iOS */
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        /* Form controls for mobile */
        .form-control, .form-select {
            font-size: 16px; /* Prevents zoom on iOS */
            min-height: 44px; /* iOS minimum touch target */
        }

        .btn {
            min-height: 44px; /* iOS minimum touch target */
            font-size: 16px;
            padding: 0.5rem 1rem;
        }

        /* Desktop styles */
        @media (min-width: 768px) {
            .scheduler-container {
                overflow-x: auto;
                white-space: nowrap;
                padding: 1rem;
                border: 1px solid #ddd;
                background: white;
            }
            
            .day-box {
                display: inline-block;
                width: 200px;
                height: 380px; /* Increased height for comments */
                margin-right: 10px;
                border: 2px solid #aaa;
                text-align: center;
                padding: 10px;
                background: #f9f9f9;
                vertical-align: top;
                border-radius: 8px;
            }
        }

        /* Mobile styles */
        @media (max-width: 767px) {
            .container-fluid {
                padding: 0.5rem;
            }
            
            .scheduler-container {
                padding: 0.5rem;
                border: 1px solid #ddd;
                background: white;
                overflow-x: visible;
                white-space: normal;
            }
            
            .day-box {
                display: block;
                width: 100%;
                max-width: 100%;
                height: auto;
                min-height: 380px; /* Increased height for comments */
                margin: 0 0 15px 0;
                border: 2px solid #aaa;
                text-align: center;
                padding: 15px;
                background: #f9f9f9;
                border-radius: 8px;
            }

            /* Stack form elements vertically on mobile */
            .row > .col-md-3,
            .row > .col-md-6 {
                margin-bottom: 1rem;
            }

            /* Button adjustments for mobile */
            .btn-group-mobile {
                display: flex;
                flex-direction: column;
                gap: 10px;
            }
            
            .btn-group-mobile .btn {
                width: 100%;
            }

            /* Image preview adjustments for mobile */
            .sample-image {
                width: 60px !important;
                height: 45px !important;
                margin: 3px !important;
            }
        }

        /* Common styles for all devices */
        .day-box h6 {
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 1px solid #ddd;
            font-weight: bold;
            color: #333;
        }
        
        .image-container {
            width: 100%;
            height: 120px; /* Reduced height to make room for comments */
            margin: 10px 0;
            border: 2px dashed #ccc;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border-radius: 5px;
            position: relative;
        }
        
        .selected-image {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        
        .image-placeholder {
            color: #999;
            font-size: 12px;
            text-align: center;
            padding: 10px;
        }
        
        .image-selector {
            margin-top: 8px;
            margin-bottom: 8px;
        }
        
        .image-selector select {
            width: 100%;
            font-size: 14px;
            padding: 8px;
            min-height: 44px; /* Touch target */
        }

        /* Comment section styles */
        .comment-section {
            margin-top: 10px;
        }

        .comment-section label {
            font-size: 12px;
            font-weight: bold;
            color: #666;
            display: block;
            margin-bottom: 5px;
            text-align: left;
        }

        .comment-textarea {
            width: 100%;
            min-height: 60px;
            font-size: 14px;
            padding: 6px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
            font-family: inherit;
            -webkit-user-select: text;
            -moz-user-select: text;
            -ms-user-select: text;
            user-select: text;
        }

        .comment-textarea:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .sample-image {
            width: 80px;
            height: 60px;
            margin: 5px;
            display: inline-block;
            border: 2px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
            background-color: #f8f9fa;
            touch-action: manipulation; /* Better touch response */
        }

        /* Touch improvements */
        .sample-image:hover,
        .sample-image:active {
            border-color: #007bff;
            transform: scale(1.05);
            transition: all 0.2s ease;
        }

        /* Loading states */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Add days section */
        .add-days-section {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            border: 1px solid #e9ecef;
        }

        .add-days-section .form-control {
            max-width: 100px;
        }

        /* Export-friendly styles */
        @media print {
            .scheduler-container {
                overflow: visible !important;
                white-space: normal !important;
            }
            .day-box {
                page-break-inside: avoid;
                margin-bottom: 20px;
                display: inline-block;
                width: 200px;
                height: 380px;
            }
            .comment-textarea {
                border: 1px solid #ccc !important;
                background: white !important;
            }
        }

        /* Tablet styles */
        @media (min-width: 768px) and (max-width: 1024px) {
            .day-box {
                width: 180px;
                height: 360px;
            }
            
            .sample-image {
                width: 70px;
                height: 50px;
            }
        }

        /* Large mobile styles */
        @media (min-width: 576px) and (max-width: 767px) {
            .btn-group-mobile {
                flex-direction: row;
                flex-wrap: wrap;
            }
            
            .btn-group-mobile .btn {
                flex: 1;
                min-width: 150px;
            }
        }
    </style>
</head>
<body>
    <div class="container-fluid p-2 p-md-4">
        <h1 class="mb-4 text-center text-md-start">Custom Scheduler</h1>

        <div class="row mb-4">
            <div class="col-md-3 col-12">
                <label class="form-label">Start Date:</label>
                <input type="text" id="startDate" class="form-control">
            </div>
            <div class="col-md-3 col-12">
                <label class="form-label">Number of Days:</label>
                <input type="number" id="numDays" class="form-control" value="7" min="1" max="31">
            </div>
            <div class="col-md-6 col-12">
                <label class="form-label">Available Images:</label>
                <div class="mt-2" id="imagePreview">
                    <!-- Image previews will be loaded here automatically -->
                </div>
            </div>
        </div>

        <div class="d-grid d-md-block mb-4">
            <button class="btn btn-primary btn-lg" onclick="generateSchedule()">Generate Schedule</button>
        </div>

        <!-- Add/Remove Days Section -->
        <div id="addDaysSection" class="add-days-section" style="display: none;">
            <h5 class="mb-3">Modify Schedule</h5>
            <div class="row align-items-end">
                <div class="col-md-3 col-6">
                    <label class="form-label">Days to Add:</label>
                    <input type="number" id="additionalDays" class="form-control" value="1" min="1" max="31">
                </div>
                <div class="col-md-3 col-6">
                    <button class="btn btn-success" onclick="addMoreDays()">Add Days</button>
                </div>
                <div class="col-md-3 col-6 mt-3 mt-md-0">
                    <label class="form-label">Days to Remove:</label>
                    <input type="number" id="removeDays" class="form-control" value="1" min="1" max="31">
                </div>
                <div class="col-md-3 col-6 mt-3 mt-md-0">
                    <button class="btn btn-danger" onclick="removeLatestDays()">Remove Days</button>
                </div>
            </div>
            <div class="mt-2">
                <small class="text-muted">Current schedule has <span id="currentDayCount">0</span> days</small>
            </div>
        </div>

        <div id="scheduler" class="scheduler-container mb-4"></div>

        <div class="btn-group-mobile d-md-flex gap-md-2">
            <button class="btn btn-success" onclick="exportToPDF()">
                <span class="d-none d-md-inline">Export as </span>PDF
            </button>
            <button class="btn btn-info" onclick="exportToPNG()">
                <span class="d-none d-md-inline">Export as </span>PNG
            </button>
            <button class="btn btn-warning" onclick="printSchedule()">Print</button>
            <button class="btn btn-secondary" onclick="clearAll()">Clear All</button>
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" class="text-center mt-3" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Processing...</p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script>
        // Available image options
        const imageOptions = [
            { value: '', label: 'Select Image', src: '' },
            { value: 'grenn.png', label: 'Green Block', src: 'img/green.png' },
            { value: 'i.png', label: 'Green I Block', src: 'img/i.png' },
            { value: 'greenbaby.png', label: 'Green Baby Block', src: 'img/greenbaby.png' },
             { value: 'white.png', label: 'White Baby Block', src: 'img/white.png' },
            { value: 'yellow.png', label: 'Yellow Baby Block', src: 'img/yellow.png' },
        ];

        // Mobile detection
        const isMobile = window.innerWidth <= 767;
        const isTouch = 'ontouchstart' in window;

        // Track current schedule state
        let currentSchedule = {
            startDate: null,
            totalDays: 0,
            dayBoxes: []
        };

        // Initialize flatpickr with mobile-friendly options
        flatpickr("#startDate", { 
            dateFormat: "Y-m-d",
            defaultDate: new Date(),
            enableTime: false,
            clickOpens: true,
            allowInput: !isMobile, // Disable manual input on mobile
            disableMobile: false // Use native picker when available
        });

        // Load image previews
        function loadImagePreviews() {
            const previewContainer = document.getElementById('imagePreview');
            previewContainer.innerHTML = '';
            
            imageOptions.forEach(option => {
                if (option.value) { // Skip empty option
                    const imgDiv = document.createElement('div');
                    imgDiv.className = 'sample-image';
                    imgDiv.style.backgroundImage = `url('${option.src}')`;
                    imgDiv.style.backgroundSize = 'cover';
                    imgDiv.style.backgroundPosition = 'center';
                    imgDiv.style.backgroundRepeat = 'no-repeat';
                    imgDiv.title = option.label;
                    imgDiv.setAttribute('data-value', option.value);
                    
                    // Add touch event for mobile
                    if (isTouch) {
                        imgDiv.addEventListener('touchstart', function(e) {
                            e.preventDefault();
                            this.style.transform = 'scale(1.1)';
                        });
                        
                        imgDiv.addEventListener('touchend', function(e) {
                            e.preventDefault();
                            this.style.transform = 'scale(1.05)';
                            setTimeout(() => {
                                this.style.transform = '';
                            }, 200);
                        });
                    }
                    
                    previewContainer.appendChild(imgDiv);
                }
            });
        }

        // Load previews on page load
        loadImagePreviews();

        function generateSchedule() {
            const startDate = document.getElementById('startDate').value;
            const numDays = parseInt(document.getElementById('numDays').value);

            if (!startDate || !numDays) {
                alert('Please select start date and number of days!');
                return;
            }

            // Show loading for mobile users
            if (isMobile) {
                showLoading(true);
            }

            const scheduler = document.getElementById('scheduler');
            scheduler.innerHTML = ''; // clear

            // Update current schedule state
            currentSchedule.startDate = new Date(startDate);
            currentSchedule.totalDays = numDays;
            currentSchedule.dayBoxes = [];

            createDayBoxes(currentSchedule.startDate, numDays, 0);

            // Show the add/remove days section
            document.getElementById('addDaysSection').style.display = 'block';
            updateDayCount();

            // Hide loading
            if (isMobile) {
                setTimeout(() => showLoading(false), 500);
            }

            // Scroll to schedule on mobile
            if (isMobile) {
                setTimeout(() => {
                    scheduler.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 600);
            }
        }

        function createDayBoxes(startDate, numDays, startIndex) {
            const scheduler = document.getElementById('scheduler');

            for (let i = 0; i < numDays; i++) {
                const dayDate = new Date(startDate);
                dayDate.setDate(startDate.getDate() + i);

                const dayStr = dayDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });

                // Create options for select dropdown
                let optionsHtml = '';
                imageOptions.forEach(option => {
                    optionsHtml += `<option value="${option.value}">${option.label}</option>`;
                });

                const dayIndex = startIndex + i;
                const box = document.createElement('div');
                box.className = 'day-box';
                box.setAttribute('data-date', dayDate.toISOString().split('T')[0]);
                box.innerHTML = `
                    <h6 class="date-header">Day ${dayIndex + 1}</h6>
                    <div class="full-date" style="font-size: 11px; color: #666; margin-bottom: 10px;">${dayStr}</div>
                    <div class="image-container" id="container-${dayIndex}">
                        <div></div>
                    </div>
                    <div class="image-selector">
                        <select class="form-select form-select-sm" onchange="updateImage(${dayIndex}, this.value)">
                            ${optionsHtml}
                        </select>
                    </div>
                    <div class="comment-section">
                        <label for="comment-${dayIndex}">Comments:</label>
                        <textarea class="comment-textarea" id="comment-${dayIndex}" placeholder="Add your notes here..."></textarea>
                    </div>
                `;
                scheduler.appendChild(box);
                currentSchedule.dayBoxes.push({
                    date: dayDate,
                    index: dayIndex
                });
            }
        }

        function addMoreDays() {
            const additionalDays = parseInt(document.getElementById('additionalDays').value);
            
            if (!additionalDays || additionalDays < 1) {
                alert('Please enter a valid number of days to add!');
                return;
            }

            if (currentSchedule.totalDays === 0) {
                alert('Please generate a schedule first!');
                return;
            }

            // Show loading
            if (isMobile) {
                showLoading(true);
            }

            // Calculate the start date for new days (day after the last day)
            const lastDate = new Date(currentSchedule.startDate);
            lastDate.setDate(currentSchedule.startDate.getDate() + currentSchedule.totalDays);

            // Create new day boxes
            createDayBoxes(lastDate, additionalDays, currentSchedule.totalDays);

            // Update the schedule state
            currentSchedule.totalDays += additionalDays;
            updateDayCount();

            // Reset the additional days input
            document.getElementById('additionalDays').value = '1';

            // Hide loading
            if (isMobile) {
                setTimeout(() => showLoading(false), 300);
            }

            // Scroll to the new days on mobile
            if (isMobile) {
                setTimeout(() => {
                    const lastBox = document.querySelector('.day-box:last-child');
                    if (lastBox) {
                        lastBox.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }, 400);
            }
        }

        function removeLatestDays() {
            const removeDaysCount = parseInt(document.getElementById('removeDays').value);
            
            if (!removeDaysCount || removeDaysCount < 1) {
                alert('Please enter a valid number of days to remove!');
                return;
            }

            if (currentSchedule.totalDays === 0) {
                alert('No days to remove!');
                return;
            }

            if (removeDaysCount > currentSchedule.totalDays) {
                alert(`You can't remove more days (${removeDaysCount}) than exist in the schedule (${currentSchedule.totalDays})!`);
                return;
            }

            // Show loading
            if (isMobile) {
                showLoading(true);
            }

            const scheduler = document.getElementById('scheduler');
            const dayBoxes = Array.from(scheduler.children);

            // Remove the specified number of days from the end
            for (let i = 0; i < removeDaysCount; i++) {
                if (dayBoxes.length > 0) {
                    scheduler.removeChild(dayBoxes[dayBoxes.length - 1 - i]);
                }
            }

            // Update the schedule state
            currentSchedule.totalDays = Math.max(0, currentSchedule.totalDays - removeDaysCount);
            currentSchedule.dayBoxes = currentSchedule.dayBoxes.slice(0, -removeDaysCount);
            updateDayCount();

            // Reset the remove days input
            document.getElementById('removeDays').value = '1';

            // Hide loading
            if (isMobile) {
                setTimeout(() => showLoading(false), 300);
            }
        }

        function updateDayCount() {
            document.getElementById('currentDayCount').textContent = currentSchedule.totalDays;
        }

        function updateImage(dayIndex, imageValue) {
            const container = document.getElementById(`container-${dayIndex}`);
            
            if (!imageValue) {
                container.innerHTML = '<div></div>';
                return;
            }

            const imageOption = imageOptions.find(opt => opt.value === imageValue);
            if (imageOption && imageOption.src) {
                container.innerHTML = `<img src="${imageOption.src}" alt="${imageOption.label}" class="selected-image">`;
            }
        }

        function showLoading(show) {
            const loadingIndicator = document.getElementById('loadingIndicator');
            loadingIndicator.style.display = show ? 'block' : 'none';
            
            // Disable/enable buttons
            const buttons = document.querySelectorAll('button');
            buttons.forEach(btn => {
                if (show) {
                    btn.classList.add('loading');
                    btn.disabled = true;
                } else {
                    btn.classList.remove('loading');
                    btn.disabled = false;
                }
            });
        }

        async function createImageData() {
            const scheduler = document.getElementById('scheduler');
            
            if (!scheduler.children.length) {
                alert('Please generate a schedule first!');
                return null;
            }

            showLoading(true);

            try {
                // Create a clean clone for export
                const clone = scheduler.cloneNode(true);
                clone.style.position = 'absolute';
                clone.style.left = '-9999px';
                clone.style.width = scheduler.offsetWidth + 'px';
                clone.style.overflow = 'visible';
                clone.style.whiteSpace = 'normal';
                clone.style.backgroundColor = 'white';
                
                // Process all day boxes
                const dayBoxes = clone.querySelectorAll('.day-box');
                dayBoxes.forEach(box => {
                    // Make sure text is visible
                    box.style.zIndex = '10';
                    box.style.position = 'relative';
                    
                    // Replace textareas with properly formatted divs
                    const textareas = box.querySelectorAll('textarea');
                    textareas.forEach(textarea => {
                        const div = document.createElement('div');
                        div.className = 'export-comment';
                        div.style.width = '100%';
                        div.style.minHeight = '60px';
                        div.style.padding = '6px';
                        div.style.border = '1px solid #ccc';
                        div.style.whiteSpace = 'pre-wrap';
                        div.style.wordWrap = 'break-word';
                        div.style.overflow = 'visible';
                        div.style.backgroundColor = 'white';
                        div.style.fontFamily = 'Arial, sans-serif';
                        div.style.fontSize = '14px';
                        div.style.lineHeight = '1.4';
                        
                        // Properly handle line breaks
                        const lines = textarea.value.split('\n');
                        lines.forEach((line, i) => {
                            if (i > 0) div.appendChild(document.createElement('br'));
                            div.appendChild(document.createTextNode(line));
                        });
                        
                        if (textarea.value === '') {
                            div.appendChild(document.createTextNode('No comments'));
                        }
                        
                        textarea.parentNode.replaceChild(div, textarea);
                    });

                    // Replace selects with their selected value
                    const selects = box.querySelectorAll('select');
                    selects.forEach(select => {
                        const div = document.createElement('div');
                        div.className = 'export-select-value';
                        div.textContent = select.options[select.selectedIndex].text;
                        div.style.padding = '8px';
                        div.style.border = '1px solid #ced4da';
                        div.style.borderRadius = '4px';
                        div.style.backgroundColor = '#fff';
                        div.style.fontFamily = 'Arial, sans-serif';
                        div.style.fontSize = '14px';
                        select.parentNode.replaceChild(div, select);
                    });
                    
                    // Ensure image container is properly visible
                    const imgContainer = box.querySelector('.image-container');
                    if (imgContainer) {
                        imgContainer.style.backgroundColor = 'white';
                        imgContainer.style.zIndex = '5';
                    }
                });

                document.body.appendChild(clone);

                const canvas = await html2canvas(clone, {
                    backgroundColor: '#ffffff',
                    scale: isMobile ? 1.5 : 2,
                    useCORS: true,
                    allowTaint: true,
                    width: clone.scrollWidth,
                    height: clone.scrollHeight,
                    scrollX: 0,
                    scrollY: 0,
                    logging: true
                });

                document.body.removeChild(clone);

                return {
                    dataUrl: canvas.toDataURL('image/png'),
                    width: canvas.width,
                    height: canvas.height
                };
            }
            catch (error) {
                console.error('Image creation error:', error);
                alert('Failed to create image data. Please try again.');
                return null;
            } finally {
                showLoading(false);
            }
        }

        async function exportToPDF() {
            const imageData = await createImageData();
            if (!imageData) return;

            try {
                const { jsPDF } = window.jspdf;
                const pdfWidth = imageData.width * 0.75;
                const pdfHeight = imageData.height * 0.75;
                
                const pdf = new jsPDF({
                    orientation: pdfWidth > pdfHeight ? 'landscape' : 'portrait',
                    unit: 'px',
                    format: [pdfWidth, pdfHeight]
                });

                pdf.addImage(imageData.dataUrl, 'PNG', 0, 0, pdfWidth, pdfHeight);
                
                const today = new Date().toISOString().split('T')[0];
                pdf.save(`schedule-${today}.pdf`);
            } catch (error) {
                console.error('PDF export failed:', error);
                alert('PDF export failed. Please try again.');
            }
        }

        async function exportToPNG() {
            const imageData = await createImageData();
            if (!imageData) return;

            try {
                const link = document.createElement('a');
                link.href = imageData.dataUrl;
                
                const today = new Date().toISOString().split('T')[0];
                link.download = `schedule-${today}.png`;
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } catch (error) {
                console.error('PNG export failed:', error);
                alert('PNG export failed. Please try again.');
            }
        }

        function printSchedule() {
            const scheduler = document.getElementById('scheduler');
            
            if (!scheduler.children.length) {
                alert('Please generate a schedule first!');
                return;
            }

            showLoading(true);

            // Create a temporary container with all the schedule data
            const tempContainer = document.createElement('div');
            tempContainer.className = 'scheduler-container';
            
            const dayBoxes = Array.from(scheduler.children);
            
            dayBoxes.forEach((box, index) => {
                const dateHeader = box.querySelector('.date-header').textContent;
                const fullDate = box.querySelector('.full-date').textContent;
                const selectedImage = box.querySelector('.selected-image');
                const commentTextarea = box.querySelector('.comment-textarea');
                
                // Create a clean version for printing
                const printBox = document.createElement('div');
                printBox.className = 'day-box';
                
                let imageHtml = '';
                if (selectedImage) {
                    // Get the image source and create a proper img tag
                    const imgSrc = selectedImage.src;
                    const imgAlt = selectedImage.alt;
                    imageHtml = `<img src="${imgSrc}" alt="${imgAlt}" class="selected-image">`;
                } else {
                    imageHtml = '<div class="image-placeholder">No image selected</div>';
                }
                
                const commentValue = commentTextarea ? commentTextarea.value : '';
                
                printBox.innerHTML = `
                    <h6 class="date-header">${dateHeader}</h6>
                    <div class="full-date">${fullDate}</div>
                    <div class="image-container">${imageHtml}</div>
                    <div class="comment-section">
                        <label>Comments:</label>
                        <div class="comment-content">${commentValue}</div>
                    </div>
                `;
                
                tempContainer.appendChild(printBox);
            });

            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                <head>
                    <title>Schedule</title>
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        body { 
                            font-family: Arial, sans-serif; 
                            margin: 20px; 
                            background: white;
                        }
                        .scheduler-container { 
                            display: flex; 
                            flex-wrap: wrap; 
                            gap: 15px; 
                            justify-content: flex-start;
                        }
                        .day-box { 
                            width: 180px; 
                            height: auto;
                            min-height: 380px;
                            border: 2px solid #aaa; 
                            text-align: center; 
                            padding: 10px; 
                            background: #f9f9f9;
                            page-break-inside: avoid;
                            border-radius: 8px;
                            box-sizing: border-box;
                        }
                        .day-box h6 {
                            margin-bottom: 10px;
                            padding-bottom: 5px;
                            border-bottom: 1px solid #ddd;
                            font-weight: bold;
                            font-size: 14px;
                        }
                        .full-date {
                            font-size: 10px;
                            color: #666;
                            margin-bottom: 10px;
                        }
                        .image-container { 
                            width: 100%; 
                            height: 120px; 
                            margin: 10px 0; 
                            border: 2px dashed #ccc; 
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            background: white;
                            border-radius: 5px;
                            box-sizing: border-box;
                        }
                        .selected-image { 
                            max-width: 100%;
                            max-height: 100%;
                            object-fit: contain;
                            border-radius: 4px;
                        }
                        .image-placeholder {
                            color: #999;
                            font-size: 12px;
                            text-align: center;
                            padding: 10px;
                        }
                        .comment-section {
                            margin-top: 10px;
                            text-align: left;
                        }
                        .comment-section label {
                            font-size: 12px;
                            font-weight: bold;
                            color: #666;
                            display: block;
                            margin-bottom: 5px;
                        }
                        .comment-content {
                            width: 100%;
                            min-height: 60px;
                            font-size: 11px;
                            padding: 6px;
                            border: 1px solid #ccc;
                            border-radius: 4px;
                            background: white;
                            box-sizing: border-box;
                            word-wrap: break-word;
                            white-space: pre-wrap;
                        }
                        @media print {
                            body { 
                                margin: 10px; 
                            }
                            .day-box {
                                break-inside: avoid;
                                margin-bottom: 10px;
                            }
                            .scheduler-container {
                                gap: 10px;
                            }
                        }
                    </style>
                </head>
                <body>
                    <h1>Schedule</h1>
                    <div class="scheduler-container">
                        ${tempContainer.innerHTML}
                    </div>
                </body>
                </html>
            `);
            
            printWindow.document.close();
            
            // Wait for images to load before printing
            const images = printWindow.document.querySelectorAll('img');
            let loadedImages = 0;
            const totalImages = images.length;
            
            if (totalImages === 0) {
                // No images to wait for
                setTimeout(() => {
                    printWindow.print();
                    showLoading(false);
                }, 500);
            } else {
                const checkImagesLoaded = () => {
                    loadedImages++;
                    if (loadedImages >= totalImages) {
                        setTimeout(() => {
                            printWindow.print();
                            showLoading(false);
                        }, 500);
                    }
                };
                
                images.forEach(img => {
                    if (img.complete) {
                        checkImagesLoaded();
                    } else {
                        img.onload = checkImagesLoaded;
                        img.onerror = checkImagesLoaded; // Handle failed loads
                    }
                });
                
                // Fallback timeout in case images don't load
                setTimeout(() => {
                    if (loadedImages < totalImages) {
                        printWindow.print();
                        showLoading(false);
                    }
                }, 3000);
            }
        }

        function clearAll() {
            document.getElementById('scheduler').innerHTML = '';
            document.getElementById('startDate').value = '';
            document.getElementById('numDays').value = '7';
            document.getElementById('additionalDays').value = '1';
            document.getElementById('addDaysSection').style.display = 'none';
            
            // Reset schedule state
            currentSchedule = {
                startDate: null,
                totalDays: 0,
                dayBoxes: []
            };
        }

        // Handle orientation changes on mobile
        if (isMobile) {
            window.addEventListener('orientationchange', function() {
                setTimeout(() => {
                    loadImagePreviews();
                }, 500);
            });
        }

        // Prevent double-tap zoom on iOS
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);

    </script>

</body>
</html>